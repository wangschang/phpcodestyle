此规范基于PHP-FIG规范，另外参考了一些其它规范。

--------------------------------------------------------------------------------

基本的编码标准
概述
•文件必须只使用 <?php 和 <?= 标签.

•PHP文件编码必须仅用无BOM的UTF－8.

•文件应或者声明符号 (类、 函数、 常量等），或会导致副作用 （如生成输出，更改.ini 设置等），但不应执行两个操作。.

•命名空间和类必须遵循 PSR-0.

•类名采用骆驼形式,每个字符串开头字母大写,其余小写.如 StudlyCaps.

•类常量声明必须全部大写字母并使用下划线分隔.

•方法名称必须用驼峰命名法声明。如 camelCase.

文件
PHP 标记
PHP 代码必须使用长 <?php ?> 标签或短-echo <?= ?> 标签;不能用其它变体.

字符编码
PHP 代码必须使用只 utf-8 并无 BOM.

副作用
文件应声明新符号 (类、 函数、 常量等) 并不导致其他副作用，或它应该执行副作用的逻辑，但不应执行两个操作。

The phrase "side effects" means execution of logic not directly related to declaring classes, functions, constants, etc., merely from including the file.短语”副作用”意思是逻辑的执行和声明类，函数，常量等不直接相关, 仅从包含文件？

“副作用”包含但不局限于：生成输出，明确使用require和include，连接外部服务，修改ini配置，触发错误和异常，修改全局或者静态变量，读取或修改文件等等

下面是一个例子文件同时包含声明和副作用 即避免的例子：:

<?php
// side effect: change ini settings
ini_set('error_reporting', E_ALL);

// side effect: loads a file
include "file.php";

// side effect: generates output
echo "<html>\n";

// declaration
function foo()
{
    // function body
}
下面这个例子仅仅包含声明并且没有副作用； 即需要提倡的例子：

<?php
// declaration
function foo()
{
    // function body
}

// conditional declaration is *not* a side effect
if (! function_exists('bar')) {
    function bar()
    {
        // function body
    }
}
命名空间和类名
命名空间和类名必须遵守 PSR-0.

这意味着每个类本身是在一个文件中，并且在至少一个级别的命名空间中： 顶级vendor名称。

类名必须使用骆驼式 StudlyCaps写法。

编写 PHP 5.3 和之后的代码必须使用正式的命名空间。.

例如:

<?php
// PHP 5.3 and later:
namespace Vendor\Model;

class Foo
{
}
Code written for 5.2.x and before SHOULD use the pseudo-namespacing convention of Vendor_ prefixes on class names.代码使用5.2.x及之前编写应当使用Vendor_作为前缀的伪命名空间作为类

<?php
// PHP 5.2.x and earlier:
class Vendor_Model_Foo
{
}
类常量、 属性和方法
 "类"是指所有类, 接口, 和 traits.

常量
声明类常量必须全部用大写字母并使用下划线分隔符。例如:

<?php
namespace Vendor\Model;

class Foo
{
    const VERSION = '1.0';
    const DATE_APPROVED = '2012-06-01';
}
属性
本指南有意避免了任何关于使用 $StudlyCaps, $camelCase, 或 $under_score 属性名称的建议.

Whatever naming convention is used SHOULD be applied consistently within a reasonable scope. That scope may be vendor-level, package-level, class-level, or method-level.使用任何命名约定应适用一贯在合理的范围内。该范围可能是供应商级别、 包级、 类级别或方法级别。

方法
方法名必须声明为驼峰命名法，如 camelCase().

－－－－－－－－－－－


编码样式指南
本指南是对PSR-1的延伸和扩展 ，基本的编码标准。.

概述
•代码必须遵守 PSR-1.

•代码必须使用 4 个空格缩进，不是制表符。.

•行长度 不能有硬限制软限制必须是 120 个字符 ；行应该是 80 个字符或更少。

•命名空间声明后面必须有一个空行,  use声明的块后必须有一个空行。.

•类的左大括号必须转到下一行, 右大括号必须转到主体后的下一行.

•方法的左大括号必须转到下一行, 右大括号必须转到主体后的下一行.

•所有属性和方法必须声明可见性; abstract 和final 必须在可见性前声明;static 必须在可见性后声明.

•控制结构关键字之后必须有一个空格 ；方法和函数调用不能有.

•对于控制结构左大括号必须在同一行，右大括号必须转到主体的下一行。.

•控制结构的左括号后不能有空格，控制结构的右括号前不能有空格。

例子
以下示例包括规则的一些作为快速概览：

<?php
namespace Vendor\Package;

use FooInterface;
use BarClass as Bar;
use OtherVendor\OtherPackage\BazClass;

class Foo extends Bar implements FooInterface
{
    public function sampleFunction($a, $b = null)
    {
        if ($a === $b) {
            bar();
        } elseif ($a > $b) {
            $foo->bar($arg1);
        } else {
            BazClass::bar($arg2, $arg3);
        }
    }

    final public static function bar()
    {
        // method body
    }
}
一般
基本的编码标准
代码必须遵循 PSR-1所述的所有规则。

文件
所有的 PHP 文件必须使用 Unix LF （换行） 行尾。.

所有的 PHP 文件必须以一个空行结束.(译注：应该不用添加，因为一般的编辑器都会在文件尾自动添加一个换行\n,即十六 进制的0A)

关闭 ?> 标记必须从仅包含 PHP内容 的文件省略.

行
行长度必须不进行硬限制。.

行长度软限制必须是120个字符; 自动化样式检查器必须警告但不要报错误对于软限制。.

行应该不能超过 80 个字符 ；比此长的行应分成多个不超过 80 个字符的后续行。

不能在非空白行末尾尾随空白。.

为了提高可读性，并说明相关的代码块，可以添加空行。.

一行不能有多个语句.

缩进
代码必须使用 4 个空格缩进，不能使用制表符缩进。.

N.b.: Using only spaces, and not mixing spaces with tabs, helps to avoid problems with diffs, patches, history, and annotations. The use of spaces also makes it easy to insert fine-grained sub-indentation for inter-line alignment.

关键字和True/False/Null
PHP keywords 必须是小写.

PHP 常量 true, false, 和 null 必须是小写.

Namespace 和 Use 声明
在出现时， namespace 声明后必须有一个空行.

在出现时, 所有 use 声明必须在 namespace 声明之后.

每个声明必须有一个 use 关键字.

use 块之后必须有一个空行.

例如:

<?php
namespace Vendor\Package;

use FooClass;
use BarClass as Bar;
use OtherVendor\OtherPackage\BazClass;

// ... additional PHP code ...

类、 属性和方法
"class"一词是指所有类、 接口和 traits.

继承和实现
extends 和 implements 关键字必须和类名称声明在同一行上.

类的左大括号必须在自己的行 ；类的右大括号必须在主体的下一行。.

<?php
namespace Vendor\Package;

use FooClass;
use BarClass as Bar;
use OtherVendor\OtherPackage\BazClass;

class ClassName extends ParentClass implements \ArrayAccess, \Countable
{
    // constants, properties, methods
}
implements 列表，可以分割为跨多个行，其中每个后续行缩进一次。当这样做时，列表中的第一项必须在下一行，并且必须每行只有一个接口。.

<?php
namespace Vendor\Package;

use FooClass;
use BarClass as Bar;
use OtherVendor\OtherPackage\BazClass;

class ClassName extends ParentClass implements
    \ArrayAccess,
    \Countable,
    \Serializable
{
    // constants, properties, methods
}
属性
所有属性必须声明可见性.

var 关键字不能用于声明一个属性.

每个语句不能声明多个属性.

属性名称不应该把单个下划线作为前缀来指明protected 或 private可见性.

属性声明如下所示.

<?php
namespace Vendor\Package;

class ClassName
{
    public $foo = null;
}
方法
所有方法必须声明可见性.

方法名称不应该把单个下划线作为前缀来指明protected 或 private可见性.

方法名称不能声明空格在方法名称后。. 左大括号必须在自己的行上, 右大括号必须在主体的下一行. 左括号之后不能有一个空格, 右括号之前不能有一个空格.

方法声明如下所示。注意括号、 逗号、 空格和大括号的位置：:

<?php
namespace Vendor\Package;

class ClassName
{
    public function fooBarBaz($arg1, &$arg2, $arg3 = [])
    {
        // method body
    }
}
方法参数
在参数列表中，每个逗号前不能有空格，每个逗号后必须有一个空格。.

方法参数具有默认值必须在参数列表的末尾。.

<?php
namespace Vendor\Package;

class ClassName
{
    public function foo($arg1, &$arg2, $arg3 = [])
    {
        // method body
    }
}
参数列表，可以分割为跨多个行，其中每个后续行缩进一次。. 当这样做时，列表中的第一项必须在下一行中，并且每行必须只有一个参数.

当参数列表拆分跨多个行, 右括号和左大括号必须要放在一起在自己行上并且它们之间要有一个空格。.

<?php
namespace Vendor\Package;

class ClassName
{
    public function aVeryLongMethodName(
        ClassTypeHint $arg1,
        &$arg2,
        array $arg3 = []
    ) {
        // method body
    }
}
abstract, final, 和static
在出现时,  abstract 和 final 声明必须先于可见性声明.

在出现时,  static 声明必须位于可见性声明之后.

<?php
namespace Vendor\Package;

abstract class ClassName
{
    protected static $foo;

    abstract protected function zim();

    final public static function bar()
    {
        // method body
    }
}
方法和函数调用
方法或函数调用时, 在方法或函数名和左括号之间不能有空格, 左括号后不能有空格, 右括号之前不能有空格.在参数列表中，不能在每个逗号前有空格但每个逗号后必须有一个空格.

<?php
bar();
$foo->bar($arg1);
Foo::bar($arg2, $arg3);
参数列表，可以分割为跨多个行，其中每个后续行缩进一次.  当这样做时，列表中的第一项必须在下一行中，并且每行必须只有一个参数。

<?php
$foo->bar(
    $longArgument,
    $longerArgument,
    $muchLongerArgument
);
控制结构
对于控制结构的通用样式规则如下所示：

•在控制结构关键字后面必须有一个空格
•左括号后不得有空格
•右括号前不能有空格
•右括号和左大括号之间必须有一个空格
•结构体必须缩进一次
•右大括号必须在主体的下一行
每个结构体必须由大括号括起来. This standardizes how the structures look, and reduces the likelihood of introducing errors as new lines get added to the body.这使标准化结构外观，并降低了引入错误作为新行添加到该机构的可能性

if, elseif, else
一个 if 结构如下所示. 注意括号、 空格和大括号的位置;  else 和 elseif 和早期的主体的右大括号在同一行上。

<?php
if ($expr1) {
    // if body
} elseif ($expr2) {
    // elseif body
} else {
    // else body;
}
关键字 elseif 应该被用来代替 else if 这样，所有控制关键字看起来像单个单词。

switch, case
一个 switch 结构如下所示. 注意括号、 空格和大括号的位置.  case 语句必须从 switch缩进一次, 并且 break 关键词 (或其他终止关键字) 必须和 case 主体在同一水平上缩进. There MUST be a comment such as // no break when fall-through is intentional in a non-empty case body.必须有一个注释比如//没有break 当在一个非空case体中故意失败时。


<?php
switch ($expr) {
    case 0:
        echo 'First case, with a break';
        break;
    case 1:
        echo 'Second case, which falls through';
        // no break
    case 2:
    case 3:
    case 4:
        echo 'Third case, return instead of break';
        return;
    default:
        echo 'Default case';
        break;
}
while, do while
while 语句如下所示。注意括号、 空格和大括号的位置。.

<?php
while ($expr) {
    // structure body
}
类似地, 一个 do while 语句如下所示。注意括号、 空格和大括号的位置。.

<?php
do {
    // structure body;
} while ($expr);
for
for 语句如下所示。注意括号、 空格和大括号的位置。

<?php
for ($i = 0; $i < 10; $i++) {
    // for body
}
foreach
foreach 语句如下所示。注意括号、 空格和大括号的位置。

<?php
foreach ($iterable as $key => $value) {
    // foreach body
}
try, catch
try catch 块如下所示. 注意括号、 空格和大括号的位置。

<?php
try {
    // try body
} catch (FirstExceptionType $e) {
    // catch body
} catch (OtherExceptionType $e) {
    // catch body
}
Closures闭包
Closures 必须被定义有一个空格在 function关键词后, 并且在 use 关键词前后各有一个空格.

左大括号必须在同一行，右大括号必须在主体的下一行.

在参数列表或变量列表的左括号之后不能有空格，在参数列表或变量列表的右括号之前不能有空格.

在参数列表和变量列表，每个逗号前不能有空格并且每个逗号后必须有一个空格。.

Closure 具有默认值的参数必须在参数列表的末尾.

一个closure 声明如下所示。注意括号、 逗号、 空格和大括号的位置：

<?php
$closureWithArgs = function ($arg1, $arg2) {
    // body
};

$closureWithArgsAndVars = function ($arg1, $arg2) use ($var1, $var2) {
    // body
};
参数列表和变量的列表，可以分割为跨多个行，其中每个后续行缩进一次。. 当这样做时，在列表中的第一项必须是在下一行，并且每行必须只有一个参数或变量。

当结束列表 (不管参数或变量） 拆分为跨多行， 右括号与左大括号必须要放在一起在自己行上并且它们之间要有一个空格。.

以下是closures带有和不带有参数列表和变量列表拆分为跨多行的例子.

<?php
$longArgs_noVars = function (
    $longArgument,
    $longerArgument,
    $muchLongerArgument
) {
   // body
};

$noArgs_longVars = function () use (
    $longVar1,
    $longerVar2,
    $muchLongerVar3
) {
   // body
};

$longArgs_longVars = function (
    $longArgument,
    $longerArgument,
    $muchLongerArgument
) use (
    $longVar1,
    $longerVar2,
    $muchLongerVar3
) {
   // body
};

$longArgs_shortVars = function (
    $longArgument,
    $longerArgument,
    $muchLongerArgument
) use ($var1) {
   // body
};

$shortArgs_longVars = function ($arg) use (
    $longVar1,
    $longerVar2,
    $muchLongerVar3
) {
   // body
};
请注意格式化规则也适用于闭包用于直接在函数或方法中作为参数调用。

<?php
$foo->bar(
    $arg1,
    function ($arg2) use ($var1) {
        // body
    },
    $arg3
);
结论
本指南故意省略了许多样式的元素和惯例。这些包括但不限于：

•全局变量和全局常量的声明

•函数声明

•运算符和赋值

•Inter-line alignment

•注释和文档块

•类名称前缀和后缀

•Best practices最佳做法

今后的建议可能会修订及扩展本指南来解决那些或其他元素的样式与惯例。

－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

其它规范补充
变量 
1 所有字母都使用小写。多个单词使用“_”来分割 如：$msg_error、$chk_pwd等。 


2 遵循“驼峰式”命名约定,如$camelCase.


3一律为小写格式，除非必要，单词之间一般不使用下划线“_”进行分割；  如$somebody 




变量大多数情况下不鼓励使用数字. 


专有名词大小写:
  在类、函数、文件名、目录名等各种地方，不特殊对待专有名词，不采用全大写。如$strHtml.
以标准计算机英文为蓝本，杜绝一切拼音、或拼音英文混杂的命名方式；   
变量命名只能使用项目中有据可查的英文缩写方式，例如可以使用$data而不可使用$data1、$data2这样容易产生混淆的形式，应当使用$articledata、$userdata这样一目了然容易理解的形式；   
可以合理的对过长的命名进行缩写，例如$bio($biography)，$tpp($threadsPerPage)，前提是英文中有这样既有的缩写形式，或字母符合英文缩写规范；   
必须清楚所使用英文单词的词性，在权限相关的范围内，大多使用$enable***、$is*** 、的形式，前者后面接动词，后者后面接形容词。 

我们一般鼓励使用冗长的名字，这样容易理解代码，开发者知道把数据存到哪里。除非在小循环里，不鼓励使用简洁的名字如 "$i" 和 "$n" 。  


属性
1“驼峰法命名” :例如tablePrefix、tableName 。  
2一律为小写格式，除非必要，单词之间一般不使用下划线“_”进行分割；  如$somebody 







3所有字母都使用小写。多个单词使用“_”来分割 如：$msg_error、$chk_pwd等。  

4$StudlyCaps形式命名 （首字母大写的驼峰）  


遵守变量的命名规则  



我们一般鼓励使用冗长的名字，这样容易理解代码，开发者知道把数据存到哪里。除非在小循环里，不鼓励使用简洁的名字如 "$i" 和 "$n" 。  


属性的声明必须在类的顶部，在方法的上方声明。  



所有变量都要预先声明,并注明其意义,在函数的首部定义所有的变量。不要使用一个声明一个;最好把每个变量的声明语句单独放到一行,并加上注释说明。所有变量按照字母排序。





函数参数 


参数的名字和变量的命名规范一致；   

方法参数
参数的名字和变量的命名规范一致；   

函数
1所有的名称都使用小写字母，多个单词使用“_”来分割 ,如function some_function  

2小写字母开头，驼峰命名，例如：function addBlog()。
3函数名一律为小写格式，除非必要，单词之间一般不使用下划线“_”进行分割；如 function somefunction
  


参数的名字和变量的命名规范一致；


函数名数字是允许的但大多数情况下不鼓励。


我们一般鼓励使用冗长的名字，函数名应当长到足以说明函数的意图和行为。 
    
l 函数定义中的左小括号，与函数名紧挨，中间无需空格；   
l 开始的左大括号另起一行；   
l 具有默认值的参数应该位于参数列表的后面；   
l 函数调用与定义的时候参数与参数之间加入一个空格；   
l 必须仔细检查并切实杜绝函数起始缩进位置与结束缩进位置不同的现象。  





函数程序体应缩进四个空格。}(右大括号)与声明函数的那一行代码头部对齐。


所有变量都要预先声明,并注明其意义,在函数的首部定义所有的变量。不要使用一个声明一个;最好把每个变量的声明语句单独放到一行,并加上注释说明。所有变量按照字母排序。


数据库
数据库表名都要加前缀。数据表和字段采用小写加下划线方式命名，并注意字段名不要以下划线开头，例如 think_user 表和 user_name字段，类似 _username 这样的数据表字段可能会被过滤。 




文件名

1 对于文件，只有字母数字字符、下划线和短横线（"-"）可用，空格是绝对不允许的。

2 所有文件的名字均为小写,以兼容 win/unix 类系统 如somefile.php   



3 StudlyCaps形式命名 （首字母大写的驼峰）如SomeFile.php

4小写字母，以下划线分割如some_file.php

5驼峰如someFile.php



一般情况下,一个类对应到一个文件,当一些类关系紧密时,可以存放在一个文件中。存放类的文件采用 classname.class.php 方式命名。
包含任何 PHP 代码的任何文件应当以 ".php" 扩展名结尾，众所周知的view脚本除外。   



类文件都是以.class.php为后缀（这里是指的ThinkPHP内部使用的类库文件，不代表外部加载的类库文件），使用驼峰法命名，并且首字母大写，例如DbMysql.class.php；    

类名和文件名一致（包括上面说的大小写一致），例如 UserAction类的文件命名是UserAction.class.php， InfoModel类的文件名是InfoModel.class.php， 并且不同的类库的类命名有一定的规范；    

函数、配置文件等其他类库文件之外的一般是以.php为后缀（第三方引入的不做要求） 



目录名：

全小写，下划线分隔比如model、upload_files。


StudlyCaps形式命名 （首字母大写的驼峰）,如IncludeFile

全小写如 somedir







7. 文件与目录    
7.1.文件命名    
所有包含PHP代码的程序文件或半程序文件，应以小写.php作为扩展名，而不要使用.phtml、.php3、.inc、.class等作为扩展名。    
普通程序    
能够被URL直接调用的程序，例如list.php、index.php，直接使用程序名+.php的方式命名    
函数库和类库程序    
分别以小写.func.php和.class.php作为扩展名。函数库和类库程序只能被其他程序引用，而不能独立运行。其中不能包含任何流程性的、不属于任何函数或类的程序代码。    
流程性程序    
以小写.inc.php作为扩展名。只能被其他程序引用，而不能独立运行。其中不能包含任何函数或类代码的程序代码。    
模板源文件    
以小写.html作为扩展名。模板源文件按照phpcms模板编码规则进行编写，不是可以执行的程序，而只能被phpcms模板编译器所解析，放置于./templates/default或./templates下的其他模板目录下。    
模板目标文件    
模板文件被编译后自动生成的目标程序，以小写. php作为扩展名，存放于./data/templates目录下。    
语言包文件    
以小写.lang.php作为扩展名，只能存放模板或程序使用的语言包信息。    
缓存文件    
此类文件为系统自动生成，以cache_xxx.php、usergroup_xxx.php、style_xxx.php等类似形式命名，存放于./data/cache目录下。    
7.2.目录命名    
phpcms目录命名以前面《4.4命名原则》的约定为基本准则。在可能的情况下，多以复数形式出现，如./templates、./images等。    
由于目录数量较少，因此目录命名大多是一些习惯和约定俗成，开发人员如需新建目录，应与项目组成员进行磋商，达成一致后方可实施。    
7.3.空目录索引    
请在所有不包含普通程序(即能够被URL直接调用的程序)的目录中放置一个1字节的index.htm文件，内容为一个空格。几乎除phpcms根目录以外，所有目录都属于这一类型，因此开发者需要在这些目录全部放入空index.htm文件，以避免当http服务器的Directory Listing打开时，服务器文件被索引和列表。    
附件目录等敏感目录，要在程序中实现相应功能，当新建下级目录时，必须自动写入一个空的index.htm文件，以避免新建目录被索引的问题。  


运算符
三元运算符?:和表达式之间应该有空格。如：$a ? $b : $c.

所有的二元运算符，包括"."，应该使用空格将之与操作数分开。

一元操作符和操作数之间不因该加空格，比如：负号("-")、自增("++")和自减("--")，除了操作符是个单词,比如 instanceof。  


 逻辑运算符前后必须加空格  


空格



强制转型后应该跟一个空格，例如：    

 (string) $aNum ; (int) ($cp + 5 ) 

每个在控制部分,比如 for 语句中的; (分号)后须跟一个空格。每个, (逗号)后应跟一个空格。

当用点号 "." 连接各字符串的时候，字符串与点号间必须用一个空格隔开，且允许把它分割成多行以增强可读性。在这种情况下，点号 "." 必须与等于号 "=" 对齐。例如：   
$sql = "SELECT `id`, `name` " . " FROM `people` "   
      . "WHERE `name` = 'Susan' "   
      . "ORDER BY `name` ASC ";  

当用 array 类型符号来构造数组的时候，必须在每个逗号之后加上一个空格来增强可读性。例如：$sampleArray = array(1, 2, 3, 'Think', 'SNS');   

除字符串中特意需要，一般情况下，在程序以及HTML中不出现两个连续的空格；  任何程序行尾也不能出现多余的TAB或空格。



空行
空行将逻辑相关的代码段分隔开，以提高可读性。   
下列情况应该总是使用一个空行：   
- 一个源文件的两个片段(section)之间   
- 类声明声明之间   
- 两个方法之间   
- 方法内的局部变量和方法的第一条语句之间   
- 块注释或单行注释之前   
- 一个方法内的两个逻辑段之间，用以提高可读性  

任何情况下，PHP程序中不能出现空白的带有TAB或空格的行，即：这类空白行应当不包含任何TAB或空格。 




每段较大的程序体，上、下应当加入空白行，两个程序块之间只使用1个空行，禁止使用多行。   
程序块划分尽量合理，过大或者过小的分割都会影响他人对代码的阅读和理解。一般可以以较大函数定义、逻辑结构、功能结构来进行划分。少于15行的程序块，可不加上下空白行；   



一个文件的最后一行 不能 结束在一个换行  



一行的换行符前不能有空白字符。
  


较长的语句 要分成多行书写,长表达式要在低优先级操作符处划分新行,操作符放在新行之首,划分出的新行要进 行适当的缩进,使排版整齐,语句可读。

引号 (待定)
当字符串是文字(不包含变量)，应当用单引号来括起来, 当文字字符串包含单引号就用双引号括起来，特别在 SQL 语句中有用.


数据库SQL语句中，所有数据都不得加单引号，但是在进行sql查询之前都必须经过intval函数处理；所有字符串都必须加单引号，以避免可能的注入漏洞和SQL错误。正确的写法为：   
$catid = intval($catid);   
SELECT * FROM phpcms_member WHERE username=’$_username’ AND catid=$catid; 


注释 

B.4.7.  注释文档
B.4.7.1.  格式
所有文档块 ("docblocks") 必须和 phpDocumentor 格式兼容，phpDocumentor 格式的描述超出了本文档的范围，关于它的详情，参考：http://phpdoc.org/。

所有类文件必须在文件的顶部包含文件级 （"file-level"）的 docblock ，在每个类的顶部放置一个 "class-level" 的 docblock。下面是一些例子：

B.4.7.2.  文件
每个包含 PHP 代码的文件必须至少在文件顶部的 docblock 包含这些 phpDocumentor 标签：

/**
 * 文件的简短描述
 *
 * 文件的详细描述（如果有的话）... ...
 *
 * LICENSE: 一些 license 信息
 *
 * @copyright  2008 Zend Technologies
 * @license    http://framework.zend.com/license/3_0.txt   BSD License 
 * @version    $Id:$
 * @link       http://framework.zend.com/package/PackageName
 * @since      File available since Release 1.5.0
*/
                    
B.4.7.3.  类
每个类必须至少包含这些 phpDocumentor 标签：

/**
 * 类的简述
 *
 * 类的详细描述 （如果有的话）... ...
 *
 * @copyright  2008 Zend Technologies
 * @license    http://framework.zend.com/license/   BSD License
 * @version    Release: @package_version@
 * @link       http://framework.zend.com/package/PackageName
 * @since      Class available since Release 1.5.0
 * @deprecated Class deprecated in Release 2.0.0
 */
                    
B.4.7.4.  函数
每个函数，包括对象方法，必须有最少包含下列内容的文档块（docblock）：

•函数的描述

•所有参数

•所有可能的返回值

如果输入参数比较复杂，包含数组，看参数无法一目了然，则要写输入参数的注释。  


文档注释与函数之间不能有空行。  


如果函数内部步骤比较复杂，需要写“行内注释”。  



因为访问级已经通过 "public"、 "private" 或 "protected" 声明， 不需要使用 "@access"。

如果函数/方法抛出一个异常，使用 @throws 于所有已知的异常类：

@throws exceptionclass [description]
                    
注释是对于那些容易忘记作用的代码添加简短的介绍性内容。请使用 C 样式的注释“/* */”和标准 C++ 注释“//”。  

程序开发中难免留下一些临时代码和调试代码，此类代码必须添加注释，以免日后遗忘。所有临时性、调试性、试验性的代码，必须添加统一的注释标记“//debug”并后跟完整的注释信息，这样可以方便在程序发布和最终调试前批量检查程序中是否还存在有疑问的代码。例如：   
$num = 1;   
$flag = TRUE; //debug 这里不能确定是否需要对$flag进行赋值   
if(empty($flag)) {   
//Statements   
}




SQL语句
所有SQL语句中，除了表名、字段名称以外，全部语句和函数均需大写，应当杜绝小写方式或大小写混杂的写法。例如select * from phpcms_member;是不符合规范的写法。   
很长的SQL语句应当有适当的断行，依据JOIN、FROM、ORDER BY等关键字进行界定。   
通常情况下，在对多表进行操作时，要根据不同表名称，对每个表指定一个1~2个字母的缩写，以利于语句简洁和可读性。   
如下的语句范例，是符合规范的：   
$result = $db->query(”SELECT m.*, i.*   
FROM “.TABLE_MEMBER.” m, “.TABLE_MEMBERINFO.” i   
WHERE m.userid=i.userid AND m.userid=’$_userid’);   



待定：
表名和字段名要用反引号(`)引起来以防止因为字段名中包含空格而出现错误;
数据值两边用单引号’包括,并且应确保数据值中的单引号已经转义以防止 SQL 注入。
正确 $sql = ”SELECT `user`.`name` FROM `user` WHERE `id` = ’$id’ ′′;
错误 $sql = ”select name.user from name where id = $id ”;
能使用多表查询一次查询的数据要一次读完,避免多次查询数据库,数据库使用完要关闭连接;


数组
B.4.3.1.  数字索引数组
索引不能为负数

建议数组索引从 0 开始。

当用 array 函数声明有索引的数组，在每个逗号的后面间隔空格以提高可读性：

$sampleArray = array(1, 2, 3, 'Zend', 'Studio');
                    
可以用 "array" 声明多行有索引的数组，在每个连续行的开头要用空格填补对齐：

$sampleArray = array(1, 2, 3, 'Zend', 'Studio',
                     $a, $b, $c,
                     56.44, $d, 500);
                    
B.4.3.2.  关联数组
当用声明关联数组，array 我们鼓励把代码分成多行，在每个连续行的开头用空格填补来对齐键和值：

$sampleArray = array('firstKey'  => 'firstValue',
                     'secondKey' => 'secondValue');
                    
杂项 
4.5.变量的初始化与逻辑检查    

任何变量在进行累加、直接显示或存储前必需进行初使化，例如：   
$number = 0; //数值型初始化   
$string = ‘’; //字符串初始化   
$array = array(); //数组初始化   



4.7.兼容性   
代码设计应当兼顾PHP 高低版本的特性，当前，应仍然以PHP 5.3.0作为最低通过平台，尽量不使用高版本PHP 新增的函数、常数或者常量。如果使用只在高版本才具备的函数，必须对其进行二次封装，自动判断当前PHP版本，并自行编写低版本下的兼容代码；   
对于个别函数，参数要求或者代码要求应当以较为严格的PHP版本为准；   
除非必要，不要使用PHP扩展模块中的函数。使用时应当加入必要的判断，当服务器环境不支持此函数的时候，进行必要的处理。文档和程序中的功能说明中，也应加上兼容性说明   



4.8.代码重用   
代码的有效重用可以减少效率的损失与资源的浪费。在开发软件项目时为了避免重复劳动和浪费时间。开发人员应尽量提高现有代码的重用率，同时将更多的精力用在新技术的应用和新功能的创新开发上面。   
l 在需要多次使用代码，并且对于您希望实现的任务没有可用的内置 PHP 函数时，不吝啬定义函数或类。开发者须根据功能、调用情况，将函数放置于include目录并以.func.php作为函数文件后缀，将类放置于include/class目录。超过3行，实现相同功能的程序切勿在不同程序中多次出现，这是无法容忍和回避的问题；   
l 在任何时候都不要出现同一个程序中出现两段或更多的相似代码或相同代码，即便在不同程序中，也应尽力避免。开发者应当总是有能力找到避免代码大段(超过10行)重复或类似的情况。   
需要强调的是，本部分虽然篇幅较短，但却是十分需要经验，并将花费开发者大量时间和精力去进行优化的部分，任何产品开发者必须时刻清楚和理解代码重用的重要性和必要性，切实在增强产品效率、逻辑性和可读性上下功夫，这是一名优秀软件开发者所必须具备的基本素质。   



4.9.1. 包含调用   
包含调用程序文件，请全部使用require_once，以避免可能的重复包含问题；   
包含调用缓存文件，由于缓存文件无法保证100%正确打开，请使用include_once或include。在必要时，可以使用@include_once或@include的方式，以忽略错误提示；   
包含和调用代码中，须以PHPCMS_ROOT.’/’开头，应避免直接写程序文件名(例如：require_once ‘x.php’;)的做法；   
所有被包含和调用的程序文件，包括但不限于程序、缓存或模板，通常其不能被直接URL请求。phpcms通过在./include/common.inc.php中定义一个标记性常量IN_PHPCMS，来判断程序是否被合法调用。因此，在除了./include/common.inc.php以外的任何一个被包含和调用的程序文件中，需要包含以下内容，以使得访问者无法直接通过URL请求该文件：   
defined('IN_PHPCMS') or exit('Access Denied');   



4.9.2. 错误报告级别   
在软件开发和调试阶段，请使用error_reporting(E_ALL);作为默认的错误报告级别，此级别最为严格，能够报告程序中所有的错误、警告和提示信息，以帮助开发者检查和核对代码，避免大多数安全性问题和逻辑错误、拼写错误。error_reporting()可以在./include/common.inc.php的头几行进行设置。   
在软件发布时，请使用error_reporting(E_ALL & ~E_DEPRECATED & ~E_STRICT);作为默认的错误报告级别，以利于用户使用并将无谓错误提示信息降至最低。 


条件格式
总是将恒量放在等号/不等号的左边，例如： 

 if ( 6 == $errorNum ) ...  


一个原因是假如你在等式中漏了一个等号，语法检查器会为你报错。第二个原因是你能立刻找到数值   
而不是在你的表达式的末端找到它。需要一点时间来习惯这个格式，但是它确实很有用。



三元运算符?:
麻烦在于人民往往试着在 ? 和 : 之间塞满了许多的代码。以下的是一些清晰的连接规则： 
•把条件放在括号内以使它和其他的代码相分离。
•如果可能的话，动作可以用简单的函数。
•把所做的动作，“?”，“:”放在不同的行，除非他们可以清楚的放在同一行。
例如：
   (condition) ? funct1() : func2();

   or

   (condition)
      ? long statement
      : another long statement;




不要采用缺省方法测试非零值
不要采用缺省值测试非零值，也就是使用： 

   if (FAIL != f())
比下面的方法好： 

   if (f())
即使 FAIL 可以含有 0 值 ，也就是PHP认为false的表示。在某人决定用-1代替0作为失败返回值的时候，   
一个显式的测试就可以帮助你了。就算是比较值不会变化也应该使用显式的比较；例如：if (!($bufsize % strlen($str)))   
应该写成：if (($bufsize % strlen($str)) == 0)以表示测试的数值（不是布尔）型。一个经常出   
问题的地方就是使用strcmp来测试一个字符等式，结果永远也不会等于缺省值。 
非零测试采用基于缺省值的做法，那么其他函数或表达式就会受到以下的限制:

•只能返回0表示失败，不能为/有其他的值。
•命名以便让一个真(true)的返回值是绝对显然的，调用函数IsValid()而不是Checkvalid()。


--------------------------------------------------------------------------------
布尔逻辑类型
大部分函数在FALSE的时候返回0，但是发挥非0值就代表TRUE，因而不要用1（TRUE，YES，诸如此类）等式检测一个布尔值，应该用0（FALSE，NO，诸如此类）的不等式来代替：


   if (TRUE == func()) { ...
应该写成： 

   if (FALSE != func()) { ...



使用if (0)来注释外部代码块
有时需要注释大段的测试代码，最简单的方法就是使用if (0)块： 
   function example()
   {
      great looking code

      if (0) {
      lots of code
      }

      more code
    }
你不能使用/**/，因为注释内部不能包含注释，而大段的程序中可以包含注释，不是么？
